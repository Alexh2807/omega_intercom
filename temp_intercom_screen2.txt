                    const Text('Mode de connexion'),
                    const SizedBox(height: 8),
                    SegmentedButton<ConnectionMode>(
                      segments: const [
                        ButtonSegment(
                          value: ConnectionMode.lan,
                          label: Text('Local (LAN)'),
                          icon: Icon(Icons.wifi_tethering),
                        ),
                        ButtonSegment(
                          value: ConnectionMode.internet,
                          label: Text('Internet'),
                          icon: Icon(Icons.public),
                        ),
                      ],
                      selected: <ConnectionMode>{_mode},
                      onSelectionChanged: _isIntercomActive
                          ? null
                          : (s) => setState(() => _mode = s.first),
                    ),
                    const SizedBox(height: 12),
                    if (_mode == ConnectionMode.internet)
                      Row(
                        children: [
                          Expanded(
                            child: TextField(
                              controller: _hostCtrl,
                              enabled: !_isIntercomActive,
                              decoration: const InputDecoration(
                                labelText: 'Hôte',
                                hintText: '93.1.78.21',
                              ),
                            ),
                          ),
                          const SizedBox(width: 12),
                          SizedBox(
                            width: 120,
                            child: TextField(
                              controller: _portCtrl,
                              enabled: !_isIntercomActive,
                              keyboardType: TextInputType.number,
                              decoration: const InputDecoration(
                                labelText: 'Port',
                                hintText: '55667',
                              ),
                            ),
                          ),
                        ],
                      ),
                  ],
                ),
              ),
              const SizedBox(height: 10),

              ElevatedButton.icon(
                onPressed: _toggleIntercom,
                icon: Icon(_isIntercomActive ? Icons.stop : Icons.play_arrow),
                label: Text(_isIntercomActive ? 'Désactiver' : "Activer l'intercom"),
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                  textStyle: const TextStyle(fontSize: 18),
                  backgroundColor: _isIntercomActive ? Colors.redAccent : Colors.green,
                  foregroundColor: Colors.white,
                ),
              ),
              const SizedBox(height: 20),

              if (_isIntercomActive)
                StreamBuilder<List<PeerInfo>>(
                  stream: _intercomService.peersStream,
                  initialData: const <PeerInfo>[],
                  builder: (context, snapshot) {
                    final peers = snapshot.data ?? const <PeerInfo>[];
                    final total = 1 + peers.length;
                    return Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(_mode == ConnectionMode.lan
                              ? 'Participants connectés (LAN) : $total'
                              : 'Internet: connecté à ${_hostCtrl.text}:${_portCtrl.text}'),
                          const SizedBox(height: 8),
                          if (_mode == ConnectionMode.lan)
                            Container(
                              constraints: const BoxConstraints(maxHeight: 140),
                              child: ListView.builder(
                                shrinkWrap: true,
                                itemCount: peers.length,
                                itemBuilder: (context, index) {
                                  final p = peers[index];
                                  return ListTile(
                                    dense: true,
                                    leading: const Icon(Icons.smartphone),
                                    title: Text(p.name.isEmpty ? 'Appareil' : p.name),
                                    subtitle: Text(p.address.address),
                                  );
                                },
                              ),
                            ),
                        ],
                      ),
                    );
                  },
                )
              else
                const Text('Participants connectés : 0'),

              const SizedBox(height: 16),

              if (_isIntercomActive)
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text('Logs'),
                      const SizedBox(height: 8),
                      Container(
                        height: 200,
                        width: double.infinity,
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Theme.of(context).colorScheme.surfaceVariant,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: _logs.isEmpty
                            ? const Text('En attente de logs…')
                            : ListView.builder(
                                itemCount: _logs.length,
                                itemBuilder: (context, index) {
                                  return Text(
                                    _logs[index],
                                    style: Theme.of(context)
                                        .textTheme
                                        .bodySmall
                                        ?.copyWith(fontFamily: 'monospace'),
                                  );
                                },
                              ),
                      ),
                    ],
                  ),
                ),

              const SizedBox(height: 30),
            ],
          ),
        ),
      ),
    );
  }
}
